document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById('player');
    const playlistContainer = document.getElementById('playlist');
    const videoTitle = document.getElementById('video-title');
    const searchBar = document.getElementById('search-bar');

    // Plyr ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    const player = new Plyr(video, {
        captions: { active: true, update: true, language: 'en' },
    });

    // üî¥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ M3U/M3U8 ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶∞ URL ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
    const m3uPlaylistUrl = 'https://cdn.jsdelivr.net/gh/jiocreator/streaming@main/streams/vod.m3u'; 
    
    let hls;
    let playlistItems = []; // ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶π‡¶¨‡ßá

    // ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    function loadVideoSource(url, title) {
        if (Hls.isSupported()) {
            if (hls) {
                hls.destroy();
            }
            hls = new Hls();
            hls.loadSource(url);
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                video.play();
                videoTitle.textContent = title;
            });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = url;
            video.addEventListener('loadedmetadata', () => {
                video.play();
                videoTitle.textContent = title;
            });
        }
    }

    // M3U ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    async function loadPlaylist() {
        try {
            const response = await fetch(m3uPlaylistUrl);
            if (!response.ok) throw new Error(`Network response was not ok: ${response.statusText}`);
            const data = await response.text();
            
            playlistItems = parseM3u(data);
            renderPlaylist(playlistItems);

        } catch (error) {
            console.error('‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•:', error);
            playlistContainer.innerHTML = '<p style="padding: 20px; text-align: center;">‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ CORS ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§</p>';
        }
    }

    // M3U ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    function parseM3u(data) {
        const lines = data.trim().split('\n');
        const items = [];
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].startsWith('#EXTINF:')) {
                const info = lines[i];
                const url = lines[++i].trim();

                const nameMatch = info.match(/,(.+)/);
                const name = nameMatch ? nameMatch[1] : 'Unknown Title';

                const logoMatch = info.match(/tvg-logo="([^"]+)"/);
                const logo = logoMatch ? logoMatch[1] : 'https://via.placeholder.com/50x70.png?text=No+Art';

                if (url) {
                    items.push({ name, url, logo });
                }
            }
        }
        return items;
    }

    // ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü UI ‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    function renderPlaylist(items) {
        playlistContainer.innerHTML = ''; // ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®
        if (items.length === 0) {
            playlistContainer.innerHTML = '<p style="padding: 20px; text-align: center;">‡¶ï‡ßã‡¶®‡ßã ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§</p>';
            return;
        }

        items.forEach(item => {
            const div = document.createElement('div');
            div.className = 'playlist-item';
            div.innerHTML = `
                <img src="${item.logo}" alt="${item.name}">
                <span>${item.name}</span>
            `;

            div.addEventListener('click', () => {
                loadVideoSource(item.url, item.name);
                // Active class ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
                document.querySelectorAll('.playlist-item').forEach(el => el.classList.remove('active'));
                div.classList.add('active');
            });

            playlistContainer.appendChild(div);
        });
    }

    // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
    searchBar.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        const filteredItems = playlistItems.filter(item => 
            item.name.toLowerCase().includes(searchTerm)
        );
        renderPlaylist(filteredItems);
    });

    // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßç‡¶≤‡ßá‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    loadPlaylist();
});
